lexer grammar SraLiterals;

DECIMAL_INTEGER
	: NUMBER_SIGN? DECIMAL_DIGIT+
	;

HEXADECIMAL_INTEGER
	: NUMBER_SIGN? HEXADECIMAL_INTEGER_PREFIX HEXADECIMAL_DIGIT+
	;

BINARY_INTEGER
	: NUMBER_SIGN? BINARY_INTEGER_PREFIX BINARY_DIGIT+
	; 

DOUBLE_FLOAT
	: NUMBER_SIGN? FLOATING_POINT_NUMBER DOUBLE_FLOAT_SUFFIX?
	;

SINGLE_FLOAT
	: NUMBER_SIGN? FLOATING_POINT_NUMBER SINGLE_FLOAT_SUFFIX
	;

HALF_FLOAT
	: NUMBER_SIGN? FLOATING_POINT_NUMBER HALF_FLOAT_SUFFIX
	;

CHAR_LITERAL
	: SINGLE_QUOTE (CHAR_ESCAPE_SEQUENCE | ~['\\]) SINGLE_QUOTE
	;

STRING_LITERAL
	: DOUBLE_QUOTE (STRING_ESCAPE_SEQUENCE | ~["\\])* DOUBLE_QUOTE
	;

fragment BINARY_DIGIT
	: [01]
	;

fragment DECIMAL_DIGIT
	: [0-9]
	;

fragment HEXADECIMAL_DIGIT
	: [0-9a-fA-F]
	;

fragment NUMBER_SIGN
	: '+'
	| '-'
	;

fragment FLOATING_POINT_NUMBER
	: DECIMAL_DIGIT+ COMMA DECIMAL_DIGIT+
	;

fragment DOUBLE_FLOAT_SUFFIX
	: 'd'
	| 'D'
	;

fragment SINGLE_FLOAT_SUFFIX
	: 'f'
	| 'F'
	;

fragment HALF_FLOAT_SUFFIX
	: 'h'
	| 'H'
	;

fragment BINARY_INTEGER_PREFIX
	: '0b'
	| '0B'
	;

fragment HEXADECIMAL_INTEGER_PREFIX
	: '0x'
	| '0X'
	;

fragment COMMA
	: '.'
	;

fragment UNICODE_PREFIX
	: 'u'
	| 'U'
	;

fragment SINGLE_QUOTE
	: '\''
	;

fragment BACKSLASH
	: '\\'
	;

fragment DOUBLE_QUOTE
	: '"'
	;

fragment CHAR_ESCAPE_SEQUENCE
	: BACKSLASH (['\\bfnrt] | UNICODE_CHARACTER)
	;

fragment STRING_ESCAPE_SEQUENCE
	: BACKSLASH (["\\bfnrt] | UNICODE_CHARACTER)
	;

fragment UNICODE_CHARACTER
	: UNICODE_PREFIX HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT
	;